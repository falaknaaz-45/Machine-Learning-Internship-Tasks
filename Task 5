# ===============================
# STEP 1: Import Libraries
# ===============================
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from mpl_toolkits.mplot3d import Axes3D

# ===============================
# STEP 2: Load Dataset from GitHub Gist
# ===============================
url = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
df = pd.read_csv(url)

# Display first few rows
print("Sample data:")
display(df.head())

# ===============================
# STEP 3: Feature Selection
# ===============================
# We'll use Age, Fare, and Pclass for clustering from the Titanic dataset
X = df[['Age', 'Fare', 'Pclass']]

# Handle missing values in 'Age' by filling with the mean
X['Age'].fillna(X['Age'].mean(), inplace=True)

# ===============================
# STEP 4: Feature Scaling
# ===============================
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ===============================
# STEP 5: Elbow Method to Find Optimal K
# ===============================
wcss = []
K = range(1, 11)
for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10) # Added n_init
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot Elbow Graph
plt.figure(figsize=(8, 4))
plt.plot(K, wcss, 'bo-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')
plt.title('Elbow Method For Optimal k (Titanic Dataset)')
plt.grid(True)
plt.show()

# ===============================
# STEP 6: Silhouette Score for Validation
# ===============================
print("Silhouette Scores:")
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10) # Added n_init
    labels = kmeans.fit_predict(X_scaled)
    score = silhouette_score(X_scaled, labels)
    print(f" - For k = {k}, Silhouette Score = {score:.4f}")

# ===============================
# STEP 7: Apply K-Means with Best K (e.g., 3 based on Elbow/Silhouette)
# ===============================
best_k = 3  # You can change this based on elbow/silhouette results
kmeans = KMeans(n_clusters=best_k, random_state=42, n_init=10) # Added n_init
df['Cluster'] = kmeans.fit_predict(X_scaled)

# ===============================
# STEP 8: 2D Cluster Visualization
# ===============================
# Visualize Age vs Fare for 2D
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='Age', y='Fare', hue='Cluster', palette='Set1', s=70)
plt.title('Customer Segments: 2D View (Age vs Fare)')
plt.xlabel('Age')
plt.ylabel('Fare')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()

# ===============================
# STEP 9: 3D Cluster Visualization
# ===============================
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

scatter = ax.scatter(
    df['Age'], df['Fare'], df['Pclass'], # Using Age, Fare, Pclass for 3D
    c=df['Cluster'], cmap='Set1', s=60
)
ax.set_xlabel('Age')
ax.set_ylabel('Fare')
ax.set_zlabel('Pclass')
ax.set_title('Customer Segments: 3D View (Age, Fare, Pclass)')
plt.show()
